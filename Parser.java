
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.util.*;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ScannerBuffer;
import java_cup.runtime.XMLElement;
import java_cup.runtime.*;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamWriter;
import java.io.*;
import java.io.FileWriter;
import java.io.IOException;
import javax.xml.transform.*;
import javax.xml.transform.stream.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\002\004\000\002\015\003\000\002\007" +
    "\002\000\002\007\004\000\002\003\004\000\002\003\005" +
    "\000\002\003\005\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\003\000\002\003\011\000\002" +
    "\003\003\000\002\012\012\000\002\013\002\000\002\013" +
    "\006\000\002\013\013\000\002\011\003\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\004\000" +
    "\002\011\005\000\002\014\003\000\002\014\003\000\002" +
    "\010\006\000\002\016\006\000\002\002\005\000\002\002" +
    "\005\000\002\002\003\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\006\000\002\006\006\000\002" +
    "\006\006\000\002\006\006\000\002\005\003\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\004\000\002\004\005\000\002\004\003\000" +
    "\002\004\003\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\032\002\uffff\004\uffff\007\uffff\014\uffff\015" +
    "\uffff\016\uffff\025\uffff\027\uffff\031\uffff\032\uffff\033\uffff" +
    "\034\uffff\001\002\000\004\002\161\001\002\000\032\002" +
    "\000\004\025\007\015\014\022\015\023\016\013\025\012" +
    "\027\016\031\007\032\010\033\017\034\014\001\002\000" +
    "\004\012\160\001\002\000\004\004\155\001\002\000\024" +
    "\005\uffd1\006\uffd1\007\uffd1\010\uffd1\012\uffd1\013\uffd1\022" +
    "\uffd1\023\uffd1\030\uffd1\001\002\000\004\012\154\001\002" +
    "\000\004\004\146\001\002\000\004\004\104\001\002\000" +
    "\016\006\060\007\061\010\057\011\064\012\uffd2\013\063" +
    "\001\002\000\014\004\025\007\015\032\010\033\017\034" +
    "\035\001\002\000\004\034\054\001\002\000\024\005\uffd0" +
    "\006\uffd0\007\uffd0\010\uffd0\012\uffd0\013\uffd0\022\uffd0\023" +
    "\uffd0\030\uffd0\001\002\000\034\002\ufffe\004\ufffe\007\ufffe" +
    "\014\ufffe\015\ufffe\016\ufffe\020\ufffe\025\ufffe\027\ufffe\031" +
    "\ufffe\032\ufffe\033\ufffe\034\ufffe\001\002\000\034\002\ufff7" +
    "\004\ufff7\007\ufff7\014\ufff7\015\ufff7\016\ufff7\020\ufff7\025" +
    "\ufff7\027\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\001\002" +
    "\000\034\002\ufff5\004\ufff5\007\ufff5\014\ufff5\015\ufff5\016" +
    "\ufff5\020\ufff5\025\ufff5\027\ufff5\031\ufff5\032\ufff5\033\ufff5" +
    "\034\ufff5\001\002\000\004\004\045\001\002\000\004\012" +
    "\044\001\002\000\014\004\025\007\015\032\010\033\017" +
    "\034\035\001\002\000\024\005\uffd9\006\032\007\033\010" +
    "\031\012\uffd9\013\034\022\uffd9\023\uffd9\030\uffd9\001\002" +
    "\000\004\012\030\001\002\000\034\002\ufffd\004\ufffd\007" +
    "\ufffd\014\ufffd\015\ufffd\016\ufffd\020\ufffd\025\ufffd\027\ufffd" +
    "\031\ufffd\032\ufffd\033\ufffd\034\ufffd\001\002\000\014\004" +
    "\025\007\015\032\010\033\017\034\035\001\002\000\014" +
    "\004\025\007\015\032\010\033\017\034\035\001\002\000" +
    "\014\004\025\007\015\032\010\033\017\034\035\001\002" +
    "\000\014\004\025\007\015\032\010\033\017\034\035\001" +
    "\002\000\024\005\uffd2\006\uffd2\007\uffd2\010\uffd2\012\uffd2" +
    "\013\uffd2\022\uffd2\023\uffd2\030\uffd2\001\002\000\024\005" +
    "\uffd5\006\uffd5\007\uffd5\010\uffd5\012\uffd5\013\uffd5\022\uffd5" +
    "\023\uffd5\030\uffd5\001\002\000\024\005\uffd6\006\uffd6\007" +
    "\uffd6\010\031\012\uffd6\013\034\022\uffd6\023\uffd6\030\uffd6" +
    "\001\002\000\024\005\uffd8\006\uffd8\007\uffd8\010\031\012" +
    "\uffd8\013\034\022\uffd8\023\uffd8\030\uffd8\001\002\000\024" +
    "\005\uffd7\006\uffd7\007\uffd7\010\uffd7\012\uffd7\013\uffd7\022" +
    "\uffd7\023\uffd7\030\uffd7\001\002\000\014\005\043\006\032" +
    "\007\033\010\031\013\034\001\002\000\024\005\uffd3\006" +
    "\uffd3\007\uffd3\010\uffd3\012\uffd3\013\uffd3\022\uffd3\023\uffd3" +
    "\030\uffd3\001\002\000\034\002\ufff8\004\ufff8\007\ufff8\014" +
    "\ufff8\015\ufff8\016\ufff8\020\ufff8\025\ufff8\027\ufff8\031\ufff8" +
    "\032\ufff8\033\ufff8\034\ufff8\001\002\000\004\035\046\001" +
    "\002\000\010\005\uffe4\006\uffe4\012\uffe4\001\002\000\006" +
    "\005\051\006\050\001\002\000\006\034\052\035\046\001" +
    "\002\000\004\012\uffe8\001\002\000\010\005\uffe5\006\uffe5" +
    "\012\uffe5\001\002\000\010\005\uffe6\006\uffe6\012\uffe6\001" +
    "\002\000\016\006\060\007\061\010\057\011\064\012\062" +
    "\013\063\001\002\000\004\012\056\001\002\000\034\002" +
    "\ufffb\004\ufffb\007\ufffb\014\ufffb\015\ufffb\016\ufffb\020\ufffb" +
    "\025\ufffb\027\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\001" +
    "\002\000\004\011\101\001\002\000\006\006\076\011\077" +
    "\001\002\000\006\007\073\011\074\001\002\000\034\002" +
    "\ufffc\004\ufffc\007\ufffc\014\ufffc\015\ufffc\016\ufffc\020\ufffc" +
    "\025\ufffc\027\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\001" +
    "\002\000\004\011\071\001\002\000\022\004\025\007\015" +
    "\021\066\031\007\032\010\033\017\034\035\035\046\001" +
    "\002\000\004\012\uffe2\001\002\000\004\012\uffe0\001\002" +
    "\000\004\012\uffe3\001\002\000\006\006\050\012\uffe1\001" +
    "\002\000\014\004\025\007\015\032\010\033\017\034\035" +
    "\001\002\000\004\012\uffda\001\002\000\004\012\uffde\001" +
    "\002\000\014\004\025\007\015\032\010\033\017\034\035" +
    "\001\002\000\004\012\uffdc\001\002\000\004\012\uffdf\001" +
    "\002\000\014\004\025\007\015\032\010\033\017\034\035" +
    "\001\002\000\004\012\uffdd\001\002\000\014\004\025\007" +
    "\015\032\010\033\017\034\035\001\002\000\004\012\uffdb" +
    "\001\002\000\024\005\uffd4\006\uffd4\007\uffd4\010\031\012" +
    "\uffd4\013\034\022\uffd4\023\uffd4\030\uffd4\001\002\000\020" +
    "\004\106\007\015\021\105\024\111\032\010\033\017\034" +
    "\035\001\002\000\006\005\ufff0\023\ufff0\001\002\000\020" +
    "\004\106\007\015\021\105\024\111\032\010\033\017\034" +
    "\035\001\002\000\006\022\140\030\136\001\002\000\006" +
    "\005\115\023\113\001\002\000\020\004\106\007\015\021" +
    "\105\024\111\032\010\033\017\034\035\001\002\000\006" +
    "\005\uffec\023\uffec\001\002\000\020\004\106\007\015\021" +
    "\105\024\111\032\010\033\017\034\035\001\002\000\006" +
    "\005\uffeb\023\uffeb\001\002\000\004\017\116\001\002\000" +
    "\032\004\uffff\007\uffff\014\uffff\015\uffff\016\uffff\020\uffff" +
    "\025\uffff\027\uffff\031\uffff\032\uffff\033\uffff\034\uffff\001" +
    "\002\000\032\004\025\007\015\014\022\015\023\016\013" +
    "\020\120\025\012\027\016\031\007\032\010\033\017\034" +
    "\014\001\002\000\036\002\ufff3\004\ufff3\007\ufff3\014\ufff3" +
    "\015\ufff3\016\ufff3\020\ufff3\025\ufff3\026\121\027\ufff3\031" +
    "\ufff3\032\ufff3\033\ufff3\034\ufff3\001\002\000\006\016\124" +
    "\017\123\001\002\000\034\002\ufff4\004\ufff4\007\ufff4\014" +
    "\ufff4\015\ufff4\016\ufff4\020\ufff4\025\ufff4\027\ufff4\031\ufff4" +
    "\032\ufff4\033\ufff4\034\ufff4\001\002\000\032\004\uffff\007" +
    "\uffff\014\uffff\015\uffff\016\uffff\020\uffff\025\uffff\027\uffff" +
    "\031\uffff\032\uffff\033\uffff\034\uffff\001\002\000\004\004" +
    "\125\001\002\000\020\004\106\007\015\021\105\024\111" +
    "\032\010\033\017\034\035\001\002\000\006\005\127\023" +
    "\113\001\002\000\004\017\130\001\002\000\032\004\uffff" +
    "\007\uffff\014\uffff\015\uffff\016\uffff\020\uffff\025\uffff\027" +
    "\uffff\031\uffff\032\uffff\033\uffff\034\uffff\001\002\000\032" +
    "\004\025\007\015\014\022\015\023\016\013\020\132\025" +
    "\012\027\016\031\007\032\010\033\017\034\014\001\002" +
    "\000\036\002\ufff3\004\ufff3\007\ufff3\014\ufff3\015\ufff3\016" +
    "\ufff3\020\ufff3\025\ufff3\026\121\027\ufff3\031\ufff3\032\ufff3" +
    "\033\ufff3\034\ufff3\001\002\000\034\002\ufff1\004\ufff1\007" +
    "\ufff1\014\ufff1\015\ufff1\016\ufff1\020\ufff1\025\ufff1\027\ufff1" +
    "\031\ufff1\032\ufff1\033\ufff1\034\ufff1\001\002\000\032\004" +
    "\025\007\015\014\022\015\023\016\013\020\135\025\012" +
    "\027\016\031\007\032\010\033\017\034\014\001\002\000" +
    "\034\002\ufff2\004\ufff2\007\ufff2\014\ufff2\015\ufff2\016\ufff2" +
    "\020\ufff2\025\ufff2\027\ufff2\031\ufff2\032\ufff2\033\ufff2\034" +
    "\ufff2\001\002\000\020\004\uffe9\007\uffe9\021\105\024\111" +
    "\032\uffe9\033\uffe9\034\uffe9\001\002\000\014\004\025\007" +
    "\015\032\010\033\017\034\035\001\002\000\014\004\uffea" +
    "\007\uffea\032\uffea\033\uffea\034\uffea\001\002\000\006\005" +
    "\uffee\023\uffee\001\002\000\006\005\uffed\023\uffed\001\002" +
    "\000\020\005\043\006\032\007\033\010\031\013\034\022" +
    "\uffd9\030\uffd9\001\002\000\006\005\145\023\113\001\002" +
    "\000\006\005\uffef\023\uffef\001\002\000\020\004\106\007" +
    "\015\021\105\024\111\032\010\033\017\034\035\001\002" +
    "\000\006\005\150\023\113\001\002\000\004\017\151\001" +
    "\002\000\032\004\uffff\007\uffff\014\uffff\015\uffff\016\uffff" +
    "\020\uffff\025\uffff\027\uffff\031\uffff\032\uffff\033\uffff\034" +
    "\uffff\001\002\000\032\004\025\007\015\014\022\015\023" +
    "\016\013\020\153\025\012\027\016\031\007\032\010\033" +
    "\017\034\014\001\002\000\034\002\ufff6\004\ufff6\007\ufff6" +
    "\014\ufff6\015\ufff6\016\ufff6\020\ufff6\025\ufff6\027\ufff6\031" +
    "\ufff6\032\ufff6\033\ufff6\034\ufff6\001\002\000\034\002\ufff9" +
    "\004\ufff9\007\ufff9\014\ufff9\015\ufff9\016\ufff9\020\ufff9\025" +
    "\ufff9\027\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\001\002" +
    "\000\004\035\046\001\002\000\006\005\157\006\050\001" +
    "\002\000\004\012\uffe7\001\002\000\034\002\ufffa\004\ufffa" +
    "\007\ufffa\014\ufffa\015\ufffa\016\ufffa\020\ufffa\025\ufffa\027" +
    "\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\006\007\004\015\003\001\001\000\002\001" +
    "\001\000\020\003\017\004\025\005\026\006\005\010\010" +
    "\012\020\016\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\102\001" +
    "\001\000\004\006\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\040\001\001\000\004\004\037\001\001\000\004\004\036" +
    "\001\001\000\004\004\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\002\067\004\025\005\066\016\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\025\005\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\025\005\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\025\005" +
    "\077\001\001\000\002\001\001\000\006\004\025\005\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\025\005\106\011\107\001\001\000\002\001\001\000\010" +
    "\004\142\005\106\011\143\001\001\000\004\014\136\001" +
    "\001\000\002\001\001\000\010\004\025\005\106\011\111" +
    "\001\001\000\002\001\001\000\010\004\025\005\106\011" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\116\001\001\000\020\003\017\004\025\005\026\006" +
    "\005\010\010\012\020\016\023\001\001\000\004\013\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\133\001\001\000\002\001\001\000\010\004\025\005\106" +
    "\011\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\130\001\001\000\020\003\017\004\025\005\026" +
    "\006\005\010\010\012\020\016\023\001\001\000\004\013" +
    "\132\001\001\000\002\001\001\000\020\003\017\004\025" +
    "\005\026\006\005\010\010\012\020\016\023\001\001\000" +
    "\002\001\001\000\010\004\025\005\106\011\141\001\001" +
    "\000\006\004\025\005\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\025\005\106\011" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\151\001\001\000\020\003\017\004\025\005\026\006" +
    "\005\010\010\012\020\016\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\155\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex,sf);
  }

  private static Optional<String> getExtension(String filename) {
    return Optional.ofNullable(filename)
      .filter(f -> f.contains("."))
      .map(f -> f.substring(filename.lastIndexOf(".") + 1));
  }

  public static void main(String[] args) throws Exception {
    if(args.length == 0){
        System.out.println("Usage : Compiler <source file>");
        return;
    }else{
        for(String file : args){
            if(!getExtension(file).get().equals("data")){
                System.out.println(getExtension(file).get());
                System.out.println("L'extension des fichier nerd est .data");
                return;
            }
        }
    }
    String parseTreeFileName = "parsedTree.json";
    // Create the file containing the parsed element and the variables declaration
    try {
        File file = new File(parseTreeFileName);
        file.createNewFile();
    } catch (IOException e) {
        System.out.println("An error occurred.");
        e.printStackTrace();
    }
    for(String filename : args){
        // initialize the symbol factory
        ComplexSymbolFactory csf = new ComplexSymbolFactory();
        // create a buffering scanner wrapper
        ScannerBuffer lexer = new ScannerBuffer(new Lexer(new BufferedReader(new FileReader(filename)),csf));
        // start parsing
        Parser p = new Parser(lexer,csf);
        p.parse();
        Compiler comp = new Compiler();
        comp.compile(parseTreeFileName);
    }
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {



    FileWriter expressionFile;
    BufferedWriter exprOut;

    void Write(String parsedText){
        if(expressionFile == null || exprOut == null){
            try {
                expressionFile = new FileWriter("parsedTree.json");
                exprOut = new BufferedWriter(expressionFile);
            } catch (IOException e) {
                System.out.println("An error occurred.");
                e.printStackTrace();
            }
        }
        try{
            exprOut.write(parsedText);
            exprOut.close();
            exprOut = null;
        }catch (IOException e){
            System.out.println("An error as occured");
            e.printStackTrace();
        }
    }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= starter EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // starter ::= StmtList 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                            Write("[" + (String)s + "]");
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("starter",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // StmtList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StmtList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // StmtList ::= StmtList expression 
            {
              Object RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                            if(stmt != null){
                                RESULT = stmt + ", " + e;
                            }else {
                                RESULT = e;
                            }
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StmtList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expression ::= res SEMI 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expression ::= TYPE ID SEMI 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                            RESULT = "{\"instruction\" : \"Decl\", \"type\" : \"" + type + "\", \"name\" : \"" + id + "\"}";
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expression ::= TYPE affect SEMI 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                RESULT = "{\"instruction\" : \"Decl\", \"type\" : \"" + type + "\", \"value\" : " + a + "}";
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expression ::= affect SEMI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expression ::= print SEMI 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                    RESULT = p;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expression ::= read SEMI 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = r;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expression ::= if 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            RESULT = "{\"instruction\" : \"if\", " + f + "}";
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expression ::= WHILE LPAR statement RPAR LBAR StmtList RBAR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                                    RESULT = "{\"instruction\" : \"while\", \"statement\" : [" + s + "], \"expression\" : [" + stm + "]}";
                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expression ::= NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // if ::= IF LPAR statement RPAR LBAR StmtList RBAR else 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                            RESULT = "\"statement\" : [" + s + "], \"expression\" : [" + stm +"], \"else\" : " + e;
                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // else ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // else ::= ELSE LBAR StmtList RBAR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "{\"instruction\" : \"else\", \"expression\" : [" + s + "]}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // else ::= ELSE IF LPAR statement RPAR LBAR StmtList RBAR else 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "{\"instruction\" : \"else if\", \"statement\" : [" + s + "], \"expression\" : [" + stm + "]}, \"else\" : " + e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= BOOL 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "{\"instruction\" : \"BOOL\", \"value\" : \"" + c + "\"}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= LPAR statement RPAR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= res comp res 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "{\"instruction\" : \"statement\", \"left\" : " + e1 + ", \"op\" : \"" + op + "\", \"right\" : " + e2 + "}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= res EQUALCOMP statement 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "{\"instruction\" : \"statement\", \"left\" : " + id + ", \"op\" : \"" + op + "\", \"right\" : " + c + "}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= BINOPNEG statement 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "{\"instruction\" : \"statement\", \"not\" : \"!\", \"value\" : " + c + "}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= statement BINOP statement 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "{\"instruction\" : \"statement\", \"left\" : [" + c1 + "], \"op\" : \"" + op + "\", \"right\" : [" + c2 + "]}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // comp ::= COMP 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // comp ::= EQUALCOMP 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // print ::= PRINT LPAR String RPAR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "{\"instruction\" : \"print\", \"value\" : " + s + "}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // read ::= READ LPAR String RPAR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "{\"instruction\" : \"read\", \"value\" : " + s + "}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // String ::= String PLUS String 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = "{\"instruction\" : \"Concat\", \"left\" : " + s1 + ", \"right\" : " + s2 + "}";
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("String",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // String ::= String PLUS ID 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = "{\"instruction\" : \"Concat\", \"left\" : " + s + ", \"right\" : {\"instruction\" : \"VAR\", \"name\" : \"" + id + "\"}}"; 
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("String",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // String ::= STRING 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                RESULT = "{\"instruction\" : \"STRING\", \"value\" : \"" + s + "\"}";
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("String",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // affect ::= ID ASSIGN res 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            RESULT =  "{\"instruction\" : \"affect\", \"name\" : \"" + id + "\", \"op\" : \"=\", \"value\" : " + r + "}";
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("affect",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // affect ::= ID ASSIGN read 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            RESULT = "{\"instruction\" : \"affect\", \"name\" : \"" + id + "\", \"op\" : \"=\", \"value\" : " + r + "}";
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("affect",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // affect ::= ID ASSIGN String 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                            RESULT = "{\"instruction\" : \"affect\", \"name\" : \"" + id + "\", \"op\" : \"=\", \"value\" : " + s + "}";
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("affect",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // affect ::= ID ASSIGN BOOL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                            RESULT = "{\"instruction\" : \"affect\", \"name\" : \"" + id + "\", \"op\" : \"=\", \"value\" : " + b + "}";
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("affect",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // affect ::= ID PLUS PLUS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                        RESULT =  "{\"instruction\" : \"affect\", \"name\" : \"" + id + "\", \"op\" : \"++\"}";
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("affect",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // affect ::= ID MOINS MOINS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                        RESULT =  "{\"instruction\" : \"affect\", \"name\" : \"" + id + "\", \"op\" : \"--\"}";
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("affect",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // affect ::= ID PLUS ASSIGN res 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                RESULT =  "{\"instruction\" : \"affect\", \"name\" : \"" + id + "\", \"op\" : \"+=\", \"value\" : " + r + "}";
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("affect",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // affect ::= ID MOINS ASSIGN res 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                RESULT =  "{\"instruction\" : \"affect\", \"name\" : \"" + id + "\", \"op\" : \"-=\", \"value\" : " + r + "}";
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("affect",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // affect ::= ID MULT ASSIGN res 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                RESULT =  "{\"instruction\" : \"affect\", \"name\" : \"" + id + "\", \"op\" : \"*=\", \"value\" : " + r + "}";
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("affect",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // affect ::= ID DIV ASSIGN res 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                            RESULT =  "{\"instruction\" : \"affect\", \"name\" : \"" + id + "\", \"op\" : \"/=\", \"value\" : " + r + "}";
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("affect",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // res ::= term_form 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("res",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // term_form ::= term_form PLUS term_form 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    RESULT = "{\"instruction\" : \"ADD\", \"left\" : " + t1 + ", \"right\" : " + t2 + "}"; 
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_form",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // term_form ::= term_form MULT term_form 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    RESULT = "{\"instruction\" : \"MULT\", \"left\" : " + t1 + ", \"right\" : " + t2 + "}"; 
                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_form",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // term_form ::= term_form MOINS term_form 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                        RESULT = "{\"instruction\" : \"MINUS\", \"left\" : " + t1 + ", \"right\" : " + t2 + "}";
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_form",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // term_form ::= term_form DIV term_form 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                    RESULT = "{\"instruction\" : \"DIV\", \"left\" : " + t1 + ", \"right\" : " + t2 + "}"; 
                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_form",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // term_form ::= MOINS term_form 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = "{\"instruction\" : \"NEG\", \"value\" : " + t1 + "}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_form",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // term_form ::= LPAR term_form RPAR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_form",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // term_form ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            RESULT = "{\"instruction\" : \"VAR\", \"name\" : \"" + id + "\"}"; 
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_form",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // term_form ::= INT 
            {
              Object RESULT =null;
		int nbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer nb = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            RESULT = "{\"instruction\" : \"INT\", \"value\" : " + nb + "}";
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_form",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // term_form ::= FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = "{\"instruction\" : \"FLOAT\", \"value\" : " + f + "}";
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_form",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
